{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 AkzidenzGroteskPro-BoldCn;\f1\fnil\fcharset128 HiraKakuProN-W3;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 DIN;\f4\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green252\blue171;\red83\green83\blue83;\red26\green26\blue26;
}
\margl1440\margr1440\vieww12240\viewh15320\viewkind1
\hyphauto1\hyphfactor90
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs28 \cf0 PROYECTO SEGUNDO / F\'cdSICA\
Anotaciones / Referecias\
\

\f1\fs20 Modelos:										Nombre del archivo:
\b0 \
TDA Miku Append / 
\b \'8f\'89\'89\'b9\'83\'7e\'83\'4e\'81\'45\'83\'41\'83\'79\'83\'93\'83\'68					\'8f\'89\'89\'b9\'83\'7e\'83\'4e
\b0 \'81\'45\'83\'41\'83\'79\'83\'93\'83\'68.pmx\
TDA BRS / 
\b \'8e\'ae\'8f\'89\'89\'b9\'83\'7e\'83\'4e\'81\'45\'83\'41\'83\'79\'83\'93\'83\'68\'81\'40\'89\'fc\'95\'cf\'81\'40B\'81\'9aRS			\'8e\'ae\'8f\'89\'89\'b9\'83\'7e\'83\'4e
\b0 \'81\'45\'83\'41\'83\'79\'83\'93\'83\'68.pmx
\b \

\b0 TDA Kasane Teto /
\b  \'8f\'64\'89\'b9\'83\'65\'83\'67
\b0  - \'82\'a9\'82\'b3\'82\'cb\'82\'c4\'82\'c6					
\b \'8f\'64\'89\'b9\'83\'65\'83\'67
\b0  - \'82\'a9\'82\'b3\'82\'cb\'82\'c4\'82\'c6.pmx\
TDA Hagane Miku / 
\b \'8d\'7c\'89\'b9\'83\'7e\'83\'4e							\'8d\'7c\'89\'b9\'83\'7e\'83\'4e
\b0 .3ds
\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \cb2 *TDA iA (Promo) / iA			
\b 					Tda\'8e\'aeIA\'88\'d0\'95\'97\'93\'b0\'81\'58
\b0 .pmx
\b \
												Tda\'8e\'aeIAx\'88\'d0\'95\'97\'93\'b0\'81\'58
\b0 .pmx.pmx
\f2\b \cf3 \

\f1\b0 \cf0 *TDA SeeU (\uc0\u223 ) / 									YamahaSeeU-APb.3ds\
*TDA iA (ver. 1.3c)									TDA IA.pmx\
												TDA IAx.pmx\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \cb1 Megurine Luka Append								Luka.max\
Kagamine Rin										RinAp.3ds\
Kagamine Len										LenAp.3ds\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \cb2 *TDA Miku Append	(Versi\uc0\u243 n Comercial)				
\b \'8f\'89\'89\'b9\'83\'7e\'83\'4eYamaha-F.rar\
												Modelo: .max\
												Texturas: .tif
\b0\fs24 \
\cb1 \
\cb2 * No se deben distribuir estos modelos pues son comerciales o de c\uc0\u243 digo cerrado\cb1 \
\
La resoluci\uc0\u243 n de exportaci\u243 n ser\u225  2K (2048 \'81\'7e 1080); Ratio: 1.90:1 (256:135) ~17:9
\f2\fs30 \

\f1\fs22 \
El audio ser\uc0\u225  ubicado en la carpeta \'81\'67P1-C11/33\'81\'68 (~\\library\\application support\\P1-C11/33\\) Cualquiera sea la pista, el audio sera con extensi\u243 n *FLAC u *OGG
\fs24 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs20 \cf0 Accesorios:										Nombre del archivo:
\b0\fs24 \
Pan franc\uc0\u233 s										Teto_utl-1.max\
\'83\'6c\'83\'4d												Puerro.max\
\'82\'ce\'82\'a0\'81\'49\'81\'49\'81\'69\'82\'6b\'82\'64\'82\'73\'82\'71\'82\'64\'82\'71\'82\'6e\'81\'6a							LtA1.3ds\
Sombrilla											SMB.3ds\
Efectos de pirotecnia								AN_P.max\
\
\
Las animaciones se encuentran ubicadas en \'81\'67
\fs22 ~\\library\\application support\\P1-C11/33\\/Animaciones\'81\'68 El orden de las mismas puede variar, a\uc0\u250 n as\u237 , el repertorio esta ubicado en la misma carpeta con el nombre \'81\'67Repertorio.tex\'81\'68\
\
Pasos para la reproducci\uc0\u243 n desde MAX:\
	Montar la imagen DMG con los permisos #-ss -r -wx desde la terminal de UNIX\
	\
	Inicializar MAX 2012 desde la terminal @max.uef\
	\
	Abrir cualquier documento previamente hecho. ex: Galaxias.max\
\
	Compilar\
\
	A\uc0\u241 adir el desfase\
\
	Compilaci\uc0\u243 n final\
\
	Reproducir desde el programa\
\
	Correr el siguiente script:\
	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f3\fs20 \cf0 """Main TTX application, Mac-only"""\
\
\
#make sure we don't lose events to SIOUX\
import MacOS\
MacOS.EnableAppswitch(-1)\
\
def SetWatchCursor():\
	import Qd, QuickDraw\
	Qd.SetCursor(Qd.GetCursor(QuickDraw.watchCursor).data)\
\
def SetArrowCursor():\
	import Qd\
	Qd.SetCursor(Qd.qd.arrow)\
\
SetWatchCursor()\
\
# a few constants\
LOGFILENAME = "TTX errors"\
PREFSFILENAME = "TTX preferences"\
DEFAULTXMLOUTPUT = ":XML output"\
DEFAULTTTOUTPUT = ":TrueType output"\
\
\
import FrameWork\
import MiniAEFrame, AppleEvents\
import EasyDialogs\
import Res\
import macfs\
import os\
import sys, time\
import re, string\
import traceback\
from fontTools import ttLib, version\
from fontTools.ttLib import xmlImport\
from fontTools.ttLib.macUtils import ProgressBar\
\
abouttext = """\\\
TTX - The free TrueType to XML to TrueType converter\
(version %s)\
Copyright 1999-2001, Just van Rossum (Letterror)\
just@letterror.com""" % version\
\
\
class TTX(FrameWork.Application, MiniAEFrame.AEServer):\
	\
	def __init__(self):\
		FrameWork.Application.__init__(self)\
		MiniAEFrame.AEServer.__init__(self)\
		self.installaehandler(\
			AppleEvents.kCoreEventClass, AppleEvents.kAEOpenApplication, self.do_nothing)\
		self.installaehandler(\
			AppleEvents.kCoreEventClass, AppleEvents.kAEPrintDocuments, self.do_nothing)\
		self.installaehandler(\
			AppleEvents.kCoreEventClass, AppleEvents.kAEOpenDocuments, self.handle_opendocumentsevent)\
		self.installaehandler(\
			AppleEvents.kCoreEventClass, AppleEvents.kAEQuitApplication, self.handle_quitevent)\
	\
	def idle(self, event):\
		SetArrowCursor()\
	\
	def makeusermenus(self):\
		m = FrameWork.Menu(self.menubar, "File")\
		FrameWork.MenuItem(m, "Open...", "O", self.domenu_open)\
		FrameWork.Separator(m)\
		FrameWork.MenuItem(m, "Quit", "Q", self._quit)\
	\
	def do_about(self, *args):\
		EasyDialogs.Message(abouttext)\
	\
	def handle_quitevent(self, *args, **kwargs):\
		self._quit()\
	\
	def domenu_open(self, *args):\
		fss, ok = macfs.StandardGetFile()\
		if ok:\
			self.opendocument(fss.as_pathname())\
	\
	def handle_opendocumentsevent(self, docs, **kwargs):\
		if type(docs) <> type([]):\
			docs = [docs]\
		for doc in docs:\
			fss, a = doc.Resolve()\
			path = fss.as_pathname()\
			self.opendocument(path)\
	\
	def opendocument(self, path):\
		filename = os.path.basename(path)\
		filetype = guessfiletype(path)\
		handler = getattr(self, "handle_%s_file" % filetype)\
		handler(path)\
	\
	def handle_xml_file(self, path):\
		prefs = getprefs()\
		makesuitcase = int(prefs.get("makesuitcases", 0))\
		dstfolder = prefs.get("ttoutput", DEFAULTTTOUTPUT)\
		if not os.path.exists(dstfolder):\
			os.mkdir(dstfolder)\
		srcfilename = dstfilename = os.path.basename(path)\
		if dstfilename[-4:] in (".ttx", ".xml"):\
			dstfilename = dstfilename[:-4]\
		if dstfilename[-4:] not in (".TTF", ".ttf"):\
			dstfilename = dstfilename + ".TTF"\
		dst = os.path.join(dstfolder, dstfilename)\
		\
		if makesuitcase:\
			try:\
				# see if the destination file is writable,\
				# otherwise we'll get an error waaay at the end of\
				# the parse procedure\
				testref = Res.FSpOpenResFile(macfs.FSSpec(dst), 3)  # read-write\
			except Res.Error, why:\
				if why[0] <> -43: # file not found\
					EasyDialogs.Message("Can't create '%s'; file already open" % dst)\
					return\
			else:\
				Res.CloseResFile(testref)\
		else:\
			try:\
				f = open(dst, "wb")\
			except IOError, why:\
				EasyDialogs.Message("Can't create '%s'; file already open" % dst)\
				return\
			else:\
				f.close()\
		pb = ProgressBar("Reading TTX file '%s'..." % srcfilename)\
		try:\
			tt = ttLib.TTFont()\
			tt.importXML(path, pb)\
			pb.setlabel("Compiling and saving...")\
			tt.save(dst, makesuitcase)\
		finally:\
			pb.close()\
	\
	def handle_datafork_file(self, path):\
		prefs = getprefs()\
		dstfolder = prefs.get("xmloutput", DEFAULTXMLOUTPUT)\
		if not os.path.exists(dstfolder):\
			os.mkdir(dstfolder)\
		filename = os.path.basename(path)\
		pb = ProgressBar("Dumping '%s' to XML..." % filename)\
		if filename[-4:] in (".TTF", ".ttf"):\
			filename = filename[:-4]\
		filename = filename + ".ttx"\
		dst = os.path.join(dstfolder, filename)\
		try:\
			tt = ttLib.TTFont(path)\
			tt.saveXML(dst, pb)\
		finally:\
			pb.close()\
	\
	def handle_resource_file(self, path):\
		prefs = getprefs()\
		dstfolder = prefs.get("xmloutput", DEFAULTXMLOUTPUT)\
		if not os.path.exists(dstfolder):\
			os.mkdir(dstfolder)\
		filename = os.path.basename(path)\
		fss = macfs.FSSpec(path)\
		try:\
			resref = Res.FSpOpenResFile(fss, 1)  # read-only\
		except:\
			return "unknown"\
		Res.UseResFile(resref)\
		pb = None\
		try:\
			n = Res.Count1Resources("sfnt")\
			for i in range(1, n+1):\
				res = Res.Get1IndResource('sfnt', i)\
				resid, restype, resname = res.GetResInfo()\
				if not resname:\
					resname = filename + `i`\
				pb = ProgressBar("Dumping '%s' to XML..." % resname)\
				dst = os.path.join(dstfolder, resname + ".ttx")\
				try:\
					tt = ttLib.TTFont(path, i)\
					tt.saveXML(dst, pb)\
				finally:\
					pb.close()\
		finally:\
			Res.CloseResFile(resref)\
	\
	def handle_python_file(self, path):\
		pass\
		#print "python", path\
	\
	def handle_unknown_file(self, path):\
		EasyDialogs.Message("Cannot open '%s': unknown file kind" % os.path.basename(path))\
	\
	def do_nothing(self, *args, **kwargs):\
		pass\
	\
	def mainloop(self, mask=FrameWork.everyEvent, wait=0):\
		self.quitting = 0\
		while not self.quitting:\
			try:\
				self.do1event(mask, wait)\
			except self.__class__:\
				# D'OH! FrameWork tries to quit us on cmd-.!\
				pass\
			except KeyboardInterrupt:\
				pass\
			except ttLib.xmlImport.xml_parse_error, why:\
				EasyDialogs.Message(\
					"An error occurred while parsing the XML file:\\n" + why)\
			except:\
				exc = traceback.format_exception(sys.exc_type, sys.exc_value, None)[0]\
				exc = string.strip(exc)\
				EasyDialogs.Message("An error occurred!\\n%s\\n[see the logfile '%s' for details]" % \
						(exc, LOGFILENAME))\
				traceback.print_exc()\
	\
	def do_kHighLevelEvent(self, event):\
		import AE\
		AE.AEProcessAppleEvent(event)\
\
\
\
def guessfiletype(path):\
	#if path[-3:] == ".py":\
	#	return "python"\
	f = open(path, "rb")\
	data = f.read(21)\
	f.close()\
	if data[:5] == "<?xml":\
		return "xml"\
	elif data[:4] in ("\\000\\001\\000\\000", "OTTO", "true"):\
		return "datafork"\
	else:\
		# assume res fork font\
		fss = macfs.FSSpec(path)\
		try:\
			resref = Res.FSpOpenResFile(fss, 1)  # read-only\
		except:\
			return "unknown"\
		Res.UseResFile(resref)\
		i = Res.Count1Resources("sfnt")\
		Res.CloseResFile(resref)\
		if i > 0:\
			return "resource"\
	return "unknown"\
\
\
default_prefs = """\\\
xmloutput:	":XML output"\
ttoutput:	":TrueType output"\
makesuitcases:	1\
"""\
\
def getprefs(path=PREFSFILENAME):\
	if not os.path.exists(path):\
		f = open(path, "w")\
		f.write(default_prefs)\
		f.close()\
	f = open(path)\
	lines = f.readlines()\
	prefs = \{\}\
	for line in lines:\
		if line[-1:] == "\\n":\
			line = line[:-1]\
		try:\
			name, value = re.split(":", line, 1)\
			prefs[string.strip(name)] = eval(value)\
		except:\
			pass\
	return prefs\
\
\
class dummy_stdin:\
	def readline(self):\
		return ""\
sys.stdin = dummy_stdin()\
\
# redirect all output to a log file\
sys.stdout = sys.stderr = open(LOGFILENAME, "w", 0)  # unbuffered\
print "Starting TTX at " + time.ctime(time.time())\
\
# fire it up!\
ttx = TTX()\
ttx.mainloop()\
\

\fs24 Finalizar la ejecuci\'f3n\
\
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc
\cf0 +================= Zona de comentarios ==================+\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \

\fs20 Pablo> Evidentemente es m\'e1s f\'e1cil si abren las secuencias que ya hab\'eda hecho antes, est\'e1n en la misma carpeta y est\'e1n en Matroska.\
Ibarra> Bueno, si no estas usamos esos\
Pablo> OK, recuerden no mover nada a las configuraciones que ya est\'e1n predispuestas\
Ibarra>Bueno.\
\
\
Pablo>Nosotros somos los \'fanicos que mantenemos este documento actualizado, \'a1Ni mi trabajo!\
\
Ibarra>Oye, \'bfQu\'e9 har\'e9mos para lo del videojuego?\
Pablo>Ay\'85 un videojuego, talvez\'85\
Ibarra>Wey, es en tercero, faltan como tres meses, m\'e1s lo que nos den.\
Pablo>Bah, si lo acabamos, ademas eso no vale cr\'e9ditos.\
Ibarra>Bueno\'85 Oye, pinche Patricio, nunca trabaj\'f3.\
Pablo>No me lo recuerdes, es desagradable.\
Ibarra>No estar\'e1 con nosotros para el videojuego, m\'ednimo\
Pablo>Bueno, luego hablamos de el, si es que me salgo porque la maestra me habla o algo, haz todo lo que escrib\'ed aqu\'ed, si no, no te preocupes.\
Ibarra>OK.\
Pablo>Para cuando era esto?\
Ibarra>Es en 2 dias.\
Pablo>Bien, solo me falta acabar la animaci\'f3n de 
\f4 \cf4 \uc0\u8234 \'bd\'c3\'c0\'af
\f1  I=Fantasy\uc0\u8236 .\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f3 \cf4 Ibarra>Bien.\
Pablo>No pregunt\'e9 si te parecia. Hahahaha.\
Ibarra>Perra :P\
\
Pablo>WEY, Te equivocaste, \'a1\'a1Es ma\'f1ana!!\
Ibarra>Perd\'f3n\
Pablo>\'85\
Ibarra>Ya acabaste la ultima secuencia?\
Pablo>Por eso me preocupaba.\
Ibarra>Y\'85?\
Pablo>No, falta ajustar el desfase, pinche desfase est\'fapido\'85\
\
	def handle_resource_file(self, path):\
		prefs = getprefs()\
		dstfolder = prefs.get("xmloutput", DEFAULTXMLOUTPUT)\
		if not os.path.exists(dstfolder):\
			os.mkdir(dstfolder)\
		filename = os.path.basename(path)\
		fss = macfs.FSSpec(path)\
		try:\
			resref = Res.FSpOpenResFile(fss, 1)  # read-only\
		except:\
			return "unknown"\
		Res.UseResFile(resref)\
		pb = None\
		try:\
			n = Res.Count1Resources("sfnt")\
			for i in range(1, n+1):\
				res = Res.Get1IndResource('sfnt', i)\
				resid, restype, resname = res.GetResInfo()\
				if not resname:\
					resname = filename + `i`\
				pb = ProgressBar("Dumping '%s' to XML..." % resname)\
				dst = os.path.join(dstfolder, resname + ".ttx")\
				try:\
					tt = ttLib.TTFont(path, i)\
					tt.saveXML(dst, pb)\
				finally:\
					pb.close()\
		finally:\
			Res.CloseResFile(resref)\
	\
	def handle_python_file(self, path):\
		pass\
		#print "python", path\
	\
	def handle_unknown_file(self, path):\
		EasyDialogs.Message("Cannot open '%s': unknown file kind" % os.path.basename(path))\
	\
	def do_nothing(self, *args, **kwargs):\
		pass\
	\
	def mainloop(self, mask=FrameWork.everyEvent, wait=0):\
		self.quitting = 0\
		while not self.quitting:\
			try:\
				self.do1event(mask, wait)\
			except self.__class__:\
				# D'OH! FrameWork tries to quit us on cmd-.!\
				pass\
			except KeyboardInterrupt:\
				pass\
			except ttLib.xmlImport.xml_parse_error, why:\
				EasyDialogs.Message(\
					"An error occurred while parsing the XML file:\\n" + why)\
			except:\
				exc = traceback.format_exception(sys.exc_type, sys.exc_value, None)[0]\
				exc = string.strip(exc)\
				EasyDialogs.Message("An error occurred!\\n%s\\n[see the logfile '%s' for details]" % \
						(exc, LOGFILENAME))\
				traceback.print_exc()\
	\
	def do_kHighLevelEvent(self, event):\
		import AE\
		AE.AEProcessAppleEvent(event)}